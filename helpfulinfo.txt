. Use Firebase Services in Your Routes
In your route files, you can now import the initialized Firebase services (db, auth, etc.) from firebaseInit.js and use them as needed.


// api/index.js
const express = require('express');
const router = express.Router();
const { db, auth } = require('../firebaseInit');

// Example route using Firestore
router.get('/data', async (req, res) => {
    try {
        const data = await db.collection('your-collection').get();
        const items = data.docs.map(doc => doc.data());
        res.json(items);
    } catch (error) {
        res.status(500).send(error.message);
    }
});

module.exports = router;


//temp rules to debug



//current rules
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

   
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}


//testing api thru terminal
Invoke-RestMethod -Uri http://localhost:3000/api/user -Method Post -Headers @{ "Content-Type" = "application/json" } -Body '{"name": "John Doe", "email": "john.doe@example.com", "password": "yourpassword"}'

https://rollout.com/integration-guides/firestore/sdk/step-by-step-guide-to-building-a-firestore-api-integration-in-js



`${type}-bookings-mobile`, 'mb-4'

//so we can know what venues are available/venues under maintenance.
        //if under maintenance === true -> then show pop up or something.
        const statusButton = document.createElement('button');
        statusButton.className = 'bg-[#917248] text-white px-3 py-1 rounded hover:bg-[#003B5C] focus:outline-none';
        statusButton.textContent = 'Status';
